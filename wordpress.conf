# Try the security with an automated tool!!
# See: https://securityheaders.com/

server {
    ######
		#	Listen port
		######
    listen 80;		#IPv4
		listen [::]:80;		#IPv6
   
    ######
		#	Server name
		#		Name of the virtual host or domain
		######
    server_name sitename.com;
    
    #Security things
    client_body_timeout 1s;
    client_header_timeout 1s;
    server_tokens off;
    add_header Strict-Transport-Security max-age=15768000;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' ; object-src 'none'";
    add_header Referrer-Policy "no-referrer" always;

    
    # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
    return 301 https://$host$request_uri;
}


server {
		######
		#	Listen port
		######
    listen 443 ssl http2;		#IPv4
		listen [::]:443 ssl http2;		#IPv6


		######
		# SSL configuration
		######
		#
		# Note: You should disable gzip for SSL traffic.
		# See: https://bugs.debian.org/773332
    # See: http://breachattack.com/#howitworks
    gzip off
		#
		# Read up on ssl_ciphers to ensure a secure configuration.
		# See: https://bugs.debian.org/765782
		#
    # Confiure the used protocols with the awesome mozilla config tool!
    # See: https://mozilla.github.io/server-side-tls/ssl-config-generator/
		#
    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate /path/to/signed_cert_plus_intermediates.crt;
    ssl_certificate_key /path/to/private_key.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # modern configuration. tweak to your needs.
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;



    ######
		#	Security options
		#		Security options to be used
		######
    
    #reply timeout
    client_body_timeout 5s;
    client_header_timeout 5s;
    

    # disables emitting nginx version on error pages and in the “Server” response header field. 
    server_tokens off;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    # Forces a browser to use HTTPS every time and refuses HTTP, watch out!
    # See: https://hstspreload.org/
    add_header Strict-Transport-Security max-age=15768000;

    # Disable MIME type guessing
    # Supported only from IE8+
    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
    add_header X-Content-Type-Options nosniff;

    # X-Frame-Options is used to avoid the usage of a frame or iframe that references a different location 
    # It avoids clickjacking
    # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
    # See: https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options SAMEORIGIN;

    # This header forces the XSS filter to be active
    add_header X-XSS-Protection "1; mode=block";

    
    # OCSP Stapling
    # Records are fetched from URL in ssl_certificate
    # used for the revocation of certiifcates
    # NGINX will ask the OCSP responder a signed token (that states the validity of a certificate) that's valid for an amount of time 
    # This token will then be forwarded to the client
    resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # If supported, forces the browser do use only whitelisted sources
    # Watch out! This may lead to issues
    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
    # generic one:
    #add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";
    # Empty one:
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' ; object-src 'none'";

    #Referrer policy
    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
    #add_header Referrer-Policy "origin-when-cross-origin" always;
    add_header Referrer-Policy "no-referrer" always;

    # !! EXPERIMENTAL !!
    #Feature-Policy
    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy
    #add_header Feature-Policy "microphone 'none'; geolocation 'none'" always;
    #add_header Feature-Policy "unsized-media 'none'" always;



		######
		#	Root directory info
		#		default directory where the files will be stored and served from
		######
        	root /var/www/sites/sitename.com/public;



		######
		#	The index file
		#		index defined to be served under directory
		######
        	index index.php index.html index.htm;



		######
		#	Server name
		#		Name of the virtual host or domain
		######
        	server_name sitename.com;



		######
		#	Misc
		######
    location / {
        try_files $uri $uri/ =404;

        #try_files $uri $uri/ =404;
        #Give 404 page
        #
        #try_files $uri $uri/ /index.html;
        #Give index.html page

				######
				#	Directory listing
				######
				autoindex off;
    }
		
		
		
		######
		#	Removing access log on robot.txt and favicon.ico
		######
		location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }
		
		
		
		######
		#	maximum allowed size of the client request body
		######
		client_max_body_size 100m;



    #####
    # Caching settings
    #####
    fastcgi_cache_path /var/www/sites/sitename.com/cache levels=1:2 keys_zone=sitename.com:500m inactive=6h;
    
    set $skip_cache 0;

    # POST requests and urls with a query string should always go to PHP
    if ($request_method = POST) {
        set $skip_cache 1;
    }   
    if ($query_string != "") {
        set $skip_cache 1;
    }   

    # Don’t cache uris containing the following segments
    if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {
        set $skip_cache 1;
    }   

    # Don’t use the cache for logged in users or recent commenters
    if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
        set $skip_cache 1;
    }
    




		######
		#	PHP Settings
    #		Serve PHP scripts to FastCGI server our php-fpm server listening on php7.0-fpm.sock
		######

    location ~ \.php$ {
        # With php7-fpm:
        fastcgi_pass unix:/run/php7.0-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;

        ###
        #	PHP gateway specs
        ###
        fastcgi_intercept_errors off;
        fastcgi_buffer_size 16k;
        fastcgi_buffers 4 16k;
        fastcgi_connect_timeout 300;
        fastcgi_send_timeout 300;
        fastcgi_read_timeout 300;
        
        ###
        # Cache-specific settings
        ####
        fastcgi_cache_bypass $skip_cache;
        fastcgi_no_cache $skip_cache;
        fastcgi_cache sitename.com;
        fastcgi_cache_valid 6h;
    }



		######
		#	404 Page
		######

		error_page 404 /404.html;



		######
		#	403 Page
		######

		error_page 403 /403.html;
		
		
		
		######
        	#	50x error
		######

		error_page 500 502 503 504 /50x.html;



		######
		#	Ht access things
		#		deny access to .htaccess files, if Apache's document root
		######
    location ~ /\.ht {
        deny all;
    }
		
		###
		#  Anti-flood
		#	in nginx.conf:
		#			limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;
    #See: http://nginx.org/en/docs/http/ngx_http_limit_req_module.html
		###
		
		#limit_req   zone=one  burst=1 nodelay;
		
		#Status code to return:
		#limit_req_status 444;

}
