# Try the security with an automated tool!!
# See: https://securityheaders.com/

server {
	#Generic values
	root /var/www/sites/sitename.com/public;
	index index.php index.html index.htm;
	server_name sitename.com;
	
	
	#ports
	listen 443 ssl http2;		#IPv4
	listen [::]:443 ssl http2;		#IPv6

	# SSL
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	# See: http://breachattack.com/#howitworks
	gzip off;
	
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Confiure the used protocols with the awesome mozilla config tool!
	# See: https://mozilla.github.io/server-side-tls/ssl-config-generator/
	
	
	# certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
	ssl_certificate /path/to/signed_cert_plus_intermediates.crt;
	ssl_certificate_key /path/to/private_key.key;
	ssl_session_timeout 1d;
	ssl_session_cache shared:SSL:50m;
	ssl_session_tickets off;

	# modern configuration. tweak to your needs.
	ssl_protocols TLSv1.2;
	ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
	ssl_prefer_server_ciphers on;



	#Security options

	#reply timeout
	client_body_timeout 5s;
	client_header_timeout 5s;


	# disables emitting nginx version on error pages and in the server response header field. 
	server_tokens off;

	# HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
	# Forces a browser to use HTTPS every time and refuses HTTP, watch out!
	# See: https://hstspreload.org/
	add_header Strict-Transport-Security max-age=15768000;

	# Disable MIME type guessing
	# Supported only from IE8+
	# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
	add_header X-Content-Type-Options nosniff;

	# X-Frame-Options is used to avoid the usage of a frame or iframe that references a different location 
	# It avoids clickjacking
	# if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
	# See: https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
	add_header X-Frame-Options SAMEORIGIN;

	# This header forces the XSS filter to be active
	add_header X-XSS-Protection "1; mode=block";


	# OCSP Stapling
	# Records are fetched from URL in ssl_certificate
	# used for the revocation of certiifcates
	# NGINX will ask the OCSP responder a signed token (that states the validity of a certificate) that's valid for an amount of time 
	# This token will then be forwarded to the client
	resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4;
	ssl_stapling on;
	ssl_stapling_verify on;

	# If supported, forces the browser do use only whitelisted sources
	# Watch out! This may lead to issues
	# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
	# generic one:
	#add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";
	# Empty one:
	add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' ; object-src 'none'";

	#Referrer policy
	# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
	#add_header Referrer-Policy "origin-when-cross-origin" always;
	add_header Referrer-Policy "no-referrer" always;

	# !! EXPERIMENTAL !!
	#Feature-Policy
	# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy
	#add_header Feature-Policy "microphone 'none'; geolocation 'none'" always;
	#add_header Feature-Policy "unsized-media 'none'" always;


	#
	location / {
		#On file not found error returns 404
		try_files $uri $uri/ =404;

		#Directory listing
		autoindex off;
	}

	# Removing access log on robot.txt and favicon.ico
	location = /favicon.ico { access_log off; log_not_found off; }
	location = /robots.txt  { access_log off; log_not_found off; }



	# maximum allowed size of the client request body
	client_max_body_size 100m;



	# Caching settingsfs
	# A suggestion could be to use a famfs (tmpfs) to enhance the performance even more (if not using a SSD)
	# This because a HDD could be slow
	# A SSD is instead fast, but if we want even more performance, just create a tmpfs
	# To do so, add on /etc/fstab this line:
	# tmpfs /var/www/sites/sitename.com/cache tmpfs defaults,size=500M 0 0
	# Then, mount it using mount -a
	fastcgi_cache_path /var/www/sites/sitename.com/cache levels=1:2 keys_zone=sitename.com:500m inactive=6h;
	set $skip_cache 0;
	
	# Non-get requests and urls with a query string should always go to PHP and not be cached
	if ($request_method != GET) {
		set $skip_cache 1;
	}   
	if ($query_string != "") {
		set $skip_cache 1;
	}   

	# ~ Wordpress specific - we don't want to cache pages that needs to be always dynamic
	if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {
		set $skip_cache 1;
	}   

	# ~ Wordpress specific - we don't want to cache such pages
	# Donâ€™t use the cache for logged in users or recent commenters
	if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
		set $skip_cache 1;
	}


	# PHP Settings
	location ~ \.php$ {
		# the address of a FastCGI server (a.k.a. PHP engine)
		fastcgi_pass unix:/run/php7.0-fpm.sock;
		
		# The file name that will be appended after a URI that ends with a slash
		fastcgi_index index.php;
		
		# sets the paramters that PHP will use (aka $SERVER array, eg. $SERVER['SERVER_ADDR'])
		#https://github.com/nginx/nginx/blob/master/conf/fastcgi_params
		include fastcgi_params;
		
		#this is another parameter and should be already present in the fastcgi_params
		# it just tells the file that's being executed
		fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;

		#	PHP gateway specs
		
		# responses with codes >= 300 should be passed to a client or be intercepted and redirected to nginx for processing with the error_page directive. 
		#wordpres can manage 404 errors, but you may choose to display custom ones
		fastcgi_intercept_errors off;
		
		#buffer size used for reading the first part of the response (usually contains a small response header)
		fastcgi_buffer_size 16k;
		
		#number and size of the buffers used for reading a response from the FastCGI per single connection
		#By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. 
		fastcgi_buffers 4 16k;
		
		#timeout for establishing a connection with a FastCGI server ( this timeout cannot usually exceed 75 seconds)
		fastcgi_connect_timeout 300;
		
		#timeout for transmitting a request to the FastCGI server 
		#(set only between two successive write operations, not for the transmission of the whole request)
		# If the FastCGI server does not receive anything within this time, the connection is closed. 
		fastcgi_send_timeout 300;
		
		#timeout for reading a response from the FastCGI server
		#(set between two successive read operations, not for the whole response)
		#If the FastCGI server does not transmit anything within this time, the connection is closed. 
		fastcgi_read_timeout 300;

		#	Cache-specific settings
		#Defines conditions under which the response will not be taken from a cache (if != "0" && len > 0 => true)
		fastcgi_cache_bypass $skip_cache;
		
		#When response will not be cached (same as fastcgi_cache_bypass)
		fastcgi_no_cache $skip_cache;
		
		#Defines a shared memory zone used for caching
		fastcgi_cache sitename.com;
		
		#Sets caching time for different response codes
		# If only caching time is specified, only 200, 301, and 302 responses are cached
		fastcgi_cache_valid 6h;
	}



	# 404 Page
	error_page 404 /404.html;

	# 403 Page
	error_page 403 /403.html;

	# 50x error
	error_page 500 502 503 504 /50x.html;

	# Ht access denial
	location ~ /\.ht {
		deny all;
	}

	###
	#  Anti-flood
	#	in nginx.conf:
	#			limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;
	#See: http://nginx.org/en/docs/http/ngx_http_limit_req_module.html
	###

	#limit_req   zone=one  burst=1 nodelay;

	#Status code to return:
	#limit_req_status 444;

}

server {
	listen 80;		#IPv4
	listen [::]:80;		#IPv6

	server_name sitename.com;

	#Security things
	#Each one is explained in-deep above
	client_body_timeout 1s;
	client_header_timeout 1s;
	server_tokens off;
	add_header Strict-Transport-Security max-age=15768000;
	add_header X-Content-Type-Options nosniff;
	add_header X-Frame-Options SAMEORIGIN;
	add_header X-XSS-Protection "1; mode=block";
	#Since the response is moved permanently, we do not wany anything to be executed
	add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' ; object-src 'none'";
	#Send the full URL to the https page as a refer
	add_header Referrer-Policy "unsafe-url" always;


	# Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
	return 301 https://$host$request_uri;
}
